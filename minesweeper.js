/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI64284 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64498 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI64416 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64299 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64263 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64114 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI27402 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI27602 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI64111 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3656 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI64014 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64002 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI64010 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64004 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI64017 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64060 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64028 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI64027 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3640.base = NTI3626;
NTI3642.base = NTI3640;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3640;
NTI64028.base = NTI104;
NTI64027.base = NTI64028;
var NNI64002 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI64002, name: "closed", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI64002, name: "opened", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI64002, name: "flaged", len: 0, sons: null}}};
NTI64002.node = NNI64002;
NTI64014.base = NTI104;
var NNI64010 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI104, name: "kind", sons: null}, 
{kind: 1, offset: "state", len: 0, typ: NTI64002, name: "state", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI64014, name: "pos", sons: null}]};
NTI64010.node = NNI64010;
NTI64004.base = NTI64010;
NTI64017.base = NTI64004;
NTI64060.base = NTI64017;
var NNI3656 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3656.node = NNI3656;
NTI3656.base = NTI3626;
NTI64111.base = NTI64017;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI27602 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a0", len: 0, typ: NTI27402, name: "a0", sons: null}, 
{kind: 1, offset: "a1", len: 0, typ: NTI27402, name: "a1", sons: null}]};
NTI27602.node = NNI27602;
NTI64114.base = NTI104;
NTI64263.base = NTI104;
NTI64299.base = NTI64004;
NTI64416.base = NTI104;
var NNI3648 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3648.node = NNI3648;
NTI3648.base = NTI3626;
NTI64498.base = NTI104;
NTI64284.base = NTI64004;

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function divInt(a_18403, b_18404) {
		      if (b_18404 == 0) raiseDivByZero();
      if (b_18404 == -1 && a_18403 == 2147483647) raiseOverflow();
      return Math.trunc(a_18403 / b_18404);
    

	
}

function chckIndx(i_20803, a_20804, b_20805) {
			var Tmp1;

	var result_20806 = 0;

	BeforeRet: do {
			if (!(a_20804 <= i_20803)) Tmp1 = false; else {				Tmp1 = (i_20803 <= b_20805);			}		if (Tmp1) {
		result_20806 = i_20803;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20806;

}

function reprEnum(e_21228, typ_21229) {
	var result_21230 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"lib\\system\\reprjs.nim",line:0};
	framePtr = F;
		if (!(isUndefined_21232(typ_21229.node.sons[e_21228]))) {
		F.line = 38;
		result_21230 = nimCopy(null, makeNimstrLit(typ_21229.node.sons[e_21228].name), NTI138);
		}
		else {
			F.line = 40;
			result_21230 = nimCopy(null, (cstrToNimstr((e_21228)+"").slice(0,-1)).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_21230;

}

function subInt(a_18003, b_18004) {
		      var result = a_18003 - b_18004;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_18203, b_18204) {
		      var result = a_18203 * b_18204;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var state_27605 = [{a0: 1773455756, a1: 4275166512}];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function raiseDivByZero() {
		var e_14858 = null;
		e_14858 = {m_type: NTI3642, parent: null, name: null, message: null, trace: null, up: null};
		e_14858.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14858.parent = null;
		raiseException(e_14858, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function getTime_49433() {
	var result_53003 = 0;

	var F={procname:"times.getTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1307;
		result_53003 = divInt(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_53003;

}
var startMilsecs_53405 = [getTime_49433()];
var EIGHT_WAY_64045 = nimCopy(null, [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]], NTI64027);
var field_64061 = [nimCopy(null, [], NTI64060)];
var width_64062 = [0];
var height_64063 = [0];
var bomb_num_64064 = [0];

function raiseIndexError() {
		var e_14894 = null;
		e_14894 = {m_type: NTI3656, parent: null, name: null, message: null, trace: null, up: null};
		e_14894.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14894.parent = null;
		raiseException(e_14894, "IndexError");

	
}

function getBoxKind(i_64071, j_64072) {
	var result_64073 = 0;

	var F={procname:"minesweeper.getBoxKind",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 25;
		result_64073 = field_64061[0][chckIndx(i_64071, 0, field_64061[0].length+0-1)-0][chckIndx(j_64072, 0, field_64061[0][chckIndx(i_64071, 0, field_64061[0].length+0-1)-0].length+0-1)-0].kind;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64073;

}

function isUndefined_21232(x_21236) {
	var result_21237 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"lib\\system\\reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_21237 = x_21236 === undefined;
	framePtr = F.prev;

	return result_21237;

}

function getBoxState(i_64076, j_64077) {
	var result_64078 = null;

	var F={procname:"minesweeper.getBoxState",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 28;
		result_64078 = toJSStr(reprEnum(field_64061[0][chckIndx(i_64076, 0, field_64061[0].length+0-1)-0][chckIndx(j_64077, 0, field_64061[0][chckIndx(i_64076, 0, field_64061[0].length+0-1)-0].length+0-1)-0].state, NTI64002));
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64078;

}

function getBoxClass(i_64087, j_64088) {
	var result_64089 = null;

	var F={procname:"minesweeper.getBoxClass",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var box_64090 = field_64061[0][chckIndx(i_64087, 0, field_64061[0].length+0-1)-0][chckIndx(j_64088, 0, field_64061[0][chckIndx(i_64087, 0, field_64061[0].length+0-1)-0].length+0-1)-0];
		F.line = 32;
		switch (box_64090.kind) {
		case 1:
			F.line = 34;
			result_64089 = "one";
			break BeforeRet;
			break;
		case 2:
			F.line = 36;
			result_64089 = "two";
			break BeforeRet;
			break;
		case 3:
			F.line = 38;
			result_64089 = "three";
			break BeforeRet;
			break;
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
			F.line = 40;
			result_64089 = "many";
			break BeforeRet;
			break;
		default: 
			F.line = 42;
			result_64089 = "";
			break BeforeRet;
			break;
		}
	} while (false);
	framePtr = F.prev;

	return result_64089;

}

function slash__22207(x_22209, y_22210) {
	var result_22211 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3498;
		result_22211 = (x_22209 / y_22210);
	framePtr = F.prev;

	return result_22211;

}

function epochTime_53006() {
	var result_53008 = 0.0;

	var F={procname:"times.epochTime",prev:framePtr,filename:"lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1310;
		result_53008 = slash__22207(new Date().getTime(), 1000);
	framePtr = F.prev;

	return result_53008;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function rotl_27802(x_27804, k_27805) {
	var result_27806 = 0;

	var F={procname:"random.rotl",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 46;
		result_27806 = ((x_27804 << k_27805) | ((x_27804 >>> 0) >>> ((64 - k_27805) >>> 0)));
	framePtr = F.prev;

	return result_27806;

}

function next_27842(r_27845) {
	var result_27846 = 0;

	var F={procname:"random.next",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 50;
		var s0_27847 = r_27845.a0;
		F.line = 51;
		var s1_27848 = r_27845.a1;
		F.line = 52;
		result_27846 = ((s0_27847 + s1_27848) >>> 0);
		F.line = 53;
		s1_27848 = (s1_27848 ^ s0_27847);
		F.line = 54;
		r_27845.a0 = ((rotl_27802(s0_27847, 55) ^ s1_27848) ^ (s1_27848 << 14));
		F.line = 55;
		r_27845.a1 = rotl_27802(s1_27848, 36);
	framePtr = F.prev;

	return result_27846;

}

function initRand_28465(seed_28467) {
	var result_28468 = [{a0: 0, a1: 0}];

	var F={procname:"random.initRand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 169;
		result_28468[0].a0 = chckRange(((seed_28467 ) >>> 16), 0, 4294967295);
		F.line = 170;
		result_28468[0].a1 = chckRange((seed_28467 & 65535), 0, 4294967295);
		F.line = 171;
		next_27842(result_28468[0]);
	framePtr = F.prev;

	return result_28468[0];

}

function randomize_28480(seed_28482) {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 176;
		nimCopy(state_27605[0], initRand_28465(seed_28482), NTI27602);
	framePtr = F.prev;

	
}

function randomize_54001() {
	var F={procname:"random.randomize",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 194;
		var time_54005 = (epochTime_53006() * 1.0000000000000000e+009);
		F.line = 195;
		randomize_28480(time_54005);
	framePtr = F.prev;

	
}

function rand_28235(r_28238, max_28239) {
	var result_28240 = 0;

	var F={procname:"random.rand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((max_28239 == 0)) {
		F.line = 118;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 119;
				L2: while (true) {
				if (!true) break L2;
					F.line = 120;
					var x_28241 = next_27842(r_28238);
					if ((x_28241 <= ((4294967295 - (4294967295 % chckRange(max_28239, 0, 4294967295))) >>> 0))) {
					F.line = 122;
					result_28240 = (((x_28241 % ((max_28239 + 1) )))|0);
					break BeforeRet;
					}
					
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	return result_28240;

}

function rand_28285(max_28287) {
	var result_28288 = 0;

	var F={procname:"random.rand",prev:framePtr,filename:"lib\\pure\\random.nim",line:0};
	framePtr = F;
		F.line = 125;
		result_28288 = rand_28235(state_27605[0], max_28287);
	framePtr = F.prev;

	return result_28288;

}

function all_64222(s_64227, pred_64232) {
	var result_64233 = false;

	var F={procname:"all.all",prev:framePtr,filename:"lib\\pure\\collections\\sequtils.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 434;
			var i_64258 = new Int32Array(2);
			F.line = 2185;
			var i_64262 = 0;
			L2: do {
				F.line = 2186;
					L3: while (true) {
					if (!(i_64262 < (s_64227 != null ? s_64227.length : 0))) break L3;
						F.line = 2187;
						nimCopy(i_64258, s_64227[chckIndx(i_64262, 0, s_64227.length+0-1)-0], NTI64114);
						if (!(pred_64232(i_64258))) {
						F.line = 436;
						result_64233 = false;
						break BeforeRet;
						}
						
						F.line = 2188;
						i_64262 = addInt(i_64262, 1);
					}
			} while(false);
		} while(false);
		F.line = 437;
		result_64233 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64233;

}

function eqeq__64137(x_64143, y_64146) {
	var result_64147 = false;

	var F={procname:"==.==",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 2340;
			var f_64214 = 0;
			F.line = 2045;
			var res_64218 = 0;
			L2: do {
				F.line = 2046;
					L3: while (true) {
					if (!(res_64218 <= 1)) break L3;
						F.line = 2047;
						f_64214 = chckRange(res_64218, 0, 1);
						if (!((x_64143[chckIndx(f_64214, 0, x_64143.length+0-1)-0] == y_64146[chckIndx(f_64214, 0, y_64146.length+0-1)-0]))) {
						F.line = 2342;
						break BeforeRet;
						}
						
						F.line = 2048;
						res_64218 = addInt(res_64218, 1);
					}
			} while(false);
		} while(false);
		F.line = 2343;
		result_64147 = true;
	} while (false);
	framePtr = F.prev;

	return result_64147;

}

function sysFatal_23221(message_23227) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_23229 = null;
		F.line = 2831;
		e_23229 = {m_type: NTI3648, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_23229.message = nimCopy(null, message_23227, NTI138);
		F.line = 2833;
		raiseException(e_23229, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_23216(msg_23218) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3771;
		sysFatal_23221(msg_23218);
	framePtr = F.prev;

	
}

function failedAssertImpl_23239(msg_23241) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3778;
		raiseAssert_23216(msg_23241);
	framePtr = F.prev;

	
}

function init(w_64093, h_64094, b_num_64095) {

										function colonanonymous__64128(b_64132) {
											var result_64133 = false;

											var F={procname:"init.:anonymous",prev:framePtr,filename:"minesweeper.nim",line:0};
											framePtr = F;
											BeforeRet: do {
												F.line = 59;
												result_64133 = !(eqeq__64137([x_64125, y_64126], b_64132));
												break BeforeRet;
											} while (false);
											framePtr = F.prev;

											return result_64133;

										}

	var result_64096 = null;

	var F={procname:"minesweeper.init",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
		F.line = 45;
		width_64062[0] = w_64093;
		F.line = 46;
		height_64063[0] = h_64094;
		F.line = 47;
		bomb_num_64064[0] = b_num_64095;
		F.line = 48;
		field_64061[0] = nimCopy(null, [], NTI64111);
		if ((subInt(mulInt(width_64062[0], height_64063[0]), 1) <= bomb_num_64064[0])) {
		F.line = 51;
		bomb_num_64064[0] = subInt(mulInt(width_64062[0], height_64063[0]), 1);
		}
		
		F.line = 52;
		randomize_54001();
		F.line = 53;
		var bombs_64115 = null;
		L1: do {
			F.line = 54;
			var i_64124 = 0;
			F.line = 3519;
			var i_64527 = 0;
			L2: do {
				F.line = 3520;
					L3: while (true) {
					if (!(i_64527 < bomb_num_64064[0])) break L3;
						F.line = 3521;
						i_64124 = i_64527;
						F.line = 55;
						var x_64125 = 0;
						F.line = 55;
						var y_64126 = 0;
						L4: do {
							F.line = 56;
								L5: while (true) {
								if (!true) break L5;
									F.line = 57;
									x_64125 = rand_28285(subInt(w_64093, 1));
									F.line = 58;
									y_64126 = rand_28285(subInt(h_64094, 1));
									if (all_64222(bombs_64115, colonanonymous__64128)) {
									F.line = 60;
									break L4;
									}
									
								}
						} while(false);
						F.line = 61;
						var Tmp6 = nimCopy(null, [x_64125, y_64126], NTI64263);
						if (bombs_64115 != null) { bombs_64115.push(Tmp6); } else { bombs_64115 = [Tmp6]; };
						F.line = 3522;
						i_64527 = addInt(i_64527, 1);
					}
			} while(false);
		} while(false);
		L7: do {
			F.line = 63;
			var i_64283 = 0;
			F.line = 3519;
			var i_64550 = 0;
			L8: do {
				F.line = 3520;
					L9: while (true) {
					if (!(i_64550 < h_64094)) break L9;
						F.line = 3521;
						i_64283 = i_64550;
						F.line = 64;
						var line_64300 = nimCopy(null, [], NTI64299);
						L10: do {
							F.line = 65;
							var j_64309 = 0;
							F.line = 3519;
							var i_64546 = 0;
							L11: do {
								F.line = 3520;
									L12: while (true) {
									if (!(i_64546 < w_64093)) break L12;
										F.line = 3521;
										j_64309 = i_64546;
										F.line = 66;
										var count_64310 = 0;
										L13: do {
											L14: do {
												F.line = 68;
												var b_64402 = new Int32Array(2);
												F.line = 3805;
												var i_64540 = 0;
												F.line = 3806;
												var L_64542 = (bombs_64115 != null ? bombs_64115.length : 0);
												L15: do {
													F.line = 3807;
														L16: while (true) {
														if (!(i_64540 < L_64542)) break L16;
															F.line = 3808;
															nimCopy(b_64402, bombs_64115[chckIndx(i_64540, 0, bombs_64115.length+0-1)-0], NTI64114);
															if (eqeq__64137([j_64309, i_64283], b_64402)) {
															F.line = 70;
															if (line_64300 != null) { line_64300.push({kind: -1, state: 0, pos: nimCopy(null, [j_64309, i_64283], NTI64416)}); } else { line_64300 = [{kind: -1, state: 0, pos: nimCopy(null, [j_64309, i_64283], NTI64416)}]; };
															F.line = 72;
															break L13;
															}
															else {
																L17: do {
																	F.line = 74;
																	var d_64475 = new Int32Array(2);
																	F.line = 2199;
																	var i_64537 = 0;
																	if ((i_64537 <= 7)) {
																	L18: do {
																		F.line = 2201;
																			L19: while (true) {
																			if (!true) break L19;
																				F.line = 2202;
																				nimCopy(d_64475, EIGHT_WAY_64045[chckIndx(i_64537, 0, EIGHT_WAY_64045.length+0-1)-0], NTI64028);
																				if (eqeq__64137([addInt(j_64309, d_64475[chckIndx(0, 0, d_64475.length+0-1)-0]), addInt(i_64283, d_64475[chckIndx(1, 0, d_64475.length+0-1)-0])], b_64402)) {
																				F.line = 76;
																				count_64310 = addInt(count_64310, 1);
																				}
																				
																				if ((7 <= i_64537)) {
																				F.line = 2203;
																				break L18;
																				}
																				
																				F.line = 2204;
																				i_64537 = addInt(i_64537, 1);
																			}
																	} while(false);
																	}
																	
																} while(false);
															}
															
															F.line = 3809;
															i_64540 = addInt(i_64540, 1);
															if (!(((bombs_64115 != null ? bombs_64115.length : 0) == L_64542))) {
															F.line = 3810;
															failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
															}
															
														}
												} while(false);
											} while(false);
											F.line = 77;
											if (line_64300 != null) { line_64300.push({kind: count_64310, state: 0, pos: nimCopy(null, [j_64309, i_64283], NTI64498)}); } else { line_64300 = [{kind: count_64310, state: 0, pos: nimCopy(null, [j_64309, i_64283], NTI64498)}]; };
										} while(false);
										F.line = 3522;
										i_64546 = addInt(i_64546, 1);
									}
							} while(false);
						} while(false);
						F.line = 78;
						var Tmp20 = nimCopy(null, line_64300, NTI64284);
						if (field_64061[0] != null) { field_64061[0].push(Tmp20); } else { field_64061[0] = [Tmp20]; };
						F.line = 3522;
						i_64550 = addInt(i_64550, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_64096;

}

function open(i_64554, j_64555, start_64556) {
			var Tmp1;

	var result_64557 = false;

	var F={procname:"minesweeper.open",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 89;
		var box_64558 = field_64061[0][chckIndx(i_64554, 0, field_64061[0].length+0-1)-0][chckIndx(j_64555, 0, field_64061[0][chckIndx(i_64554, 0, field_64061[0].length+0-1)-0].length+0-1)-0];
			if (!start_64556) Tmp1 = false; else {				Tmp1 = (box_64558.state == 2);			}		if (Tmp1) {
		F.line = 91;
		result_64557 = true;
		break BeforeRet;
		}
		else {
		if ((box_64558.state == 1)) {
		F.line = 93;
		result_64557 = true;
		break BeforeRet;
		}
		else {
		if ((box_64558.kind == -1)) {
		F.line = 95;
		result_64557 = false;
		break BeforeRet;
		}
		}}
		F.line = 97;
		box_64558.state = 1;
		if ((box_64558.kind == 0)) {
		L2: do {
			F.line = 99;
			var d_64584 = new Int32Array(2);
			F.line = 2199;
			var i_64590 = 0;
			if ((i_64590 <= 7)) {
			L3: do {
				F.line = 2201;
					L4: while (true) {
					if (!true) break L4;
						F.line = 2202;
						nimCopy(d_64584, EIGHT_WAY_64045[chckIndx(i_64590, 0, EIGHT_WAY_64045.length+0-1)-0], NTI64028);
						F.line = 101;
						var tx_64585 = addInt(box_64558.pos[chckIndx(0, 0, box_64558.pos.length+0-1)-0], d_64584[chckIndx(0, 0, d_64584.length+0-1)-0]);
						F.line = 102;
						var ty_64586 = addInt(box_64558.pos[chckIndx(1, 0, box_64558.pos.length+0-1)-0], d_64584[chckIndx(1, 0, d_64584.length+0-1)-0]);
						if (((((0 <= tx_64585) && (tx_64585 < width_64062[0])) && (0 <= ty_64586)) && (ty_64586 < height_64063[0]))) {
						F.line = 105;
						open(ty_64586, tx_64585, false);
						}
						
						if ((7 <= i_64590)) {
						F.line = 2203;
						break L3;
						}
						
						F.line = 2204;
						i_64590 = addInt(i_64590, 1);
					}
			} while(false);
			}
			
		} while(false);
		}
		
		F.line = 106;
		result_64557 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64557;

}

function check() {
											var Tmp7;

	var result_64593 = false;

	var F={procname:"minesweeper.check",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 109;
			var line_64802 = null;
			F.line = 3805;
			var i_65020 = 0;
			F.line = 3806;
			var L_65022 = (field_64061[0] != null ? field_64061[0].length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_65020 < L_65022)) break L3;
						F.line = 3808;
						line_64802 = field_64061[0][chckIndx(i_65020, 0, field_64061[0].length+0-1)-0];
						L4: do {
							F.line = 110;
							var box_65002 = null;
							F.line = 3805;
							var i_65015 = 0;
							F.line = 3806;
							var L_65017 = (line_64802 != null ? line_64802.length : 0);
							L5: do {
								F.line = 3807;
									L6: while (true) {
									if (!(i_65015 < L_65017)) break L6;
										F.line = 3808;
										box_65002 = line_64802[chckIndx(i_65015, 0, line_64802.length+0-1)-0];
											if (!!((box_65002.state == 1))) Tmp7 = false; else {												Tmp7 = !((box_65002.kind == -1));											}										if (Tmp7) {
										F.line = 112;
										result_64593 = false;
										break BeforeRet;
										}
										
										F.line = 3809;
										i_65015 = addInt(i_65015, 1);
										if (!(((line_64802 != null ? line_64802.length : 0) == L_65017))) {
										F.line = 3810;
										failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3809;
						i_65020 = addInt(i_65020, 1);
						if (!(((field_64061[0] != null ? field_64061[0].length : 0) == L_65022))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 113;
		result_64593 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_64593;

}

function flag(i_65025, j_65026) {
	var F={procname:"minesweeper.flag",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
		F.line = 117;
		var box_65027 = field_64061[0][chckIndx(i_65025, 0, field_64061[0].length+0-1)-0][chckIndx(j_65026, 0, field_64061[0][chckIndx(i_65025, 0, field_64061[0].length+0-1)-0].length+0-1)-0];
		if ((box_65027.state == 0)) {
		F.line = 119;
		box_65027.state = 2;
		}
		else {
		if ((box_65027.state == 2)) {
		F.line = 121;
		box_65027.state = 0;
		}
		}
	framePtr = F.prev;

	
}

function gameOver() {
	var F={procname:"minesweeper.gameOver",prev:framePtr,filename:"minesweeper.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 124;
			var line_65054 = null;
			F.line = 3805;
			var i_65073 = 0;
			F.line = 3806;
			var L_65075 = (field_64061[0] != null ? field_64061[0].length : 0);
			L2: do {
				F.line = 3807;
					L3: while (true) {
					if (!(i_65073 < L_65075)) break L3;
						F.line = 3808;
						line_65054 = field_64061[0][chckIndx(i_65073, 0, field_64061[0].length+0-1)-0];
						L4: do {
							F.line = 125;
							var box_65063 = null;
							F.line = 3805;
							var i_65068 = 0;
							F.line = 3806;
							var L_65070 = (line_65054 != null ? line_65054.length : 0);
							L5: do {
								F.line = 3807;
									L6: while (true) {
									if (!(i_65068 < L_65070)) break L6;
										F.line = 3808;
										box_65063 = line_65054[chckIndx(i_65068, 0, line_65054.length+0-1)-0];
										F.line = 126;
										box_65063.state = 1;
										F.line = 3809;
										i_65068 = addInt(i_65068, 1);
										if (!(((line_65054 != null ? line_65054.length : 0) == L_65070))) {
										F.line = 3810;
										failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 3809;
						i_65073 = addInt(i_65073, 1);
						if (!(((field_64061[0] != null ? field_64061[0].length : 0) == L_65075))) {
						F.line = 3810;
						failedAssertImpl_23239(makeNimstrLit("len(a) == L seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}
